services:
  mongo:
    image: mongo:latest
    container_name: netflix-mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db

  web-server:
    build:
      context: .
      dockerfile: Dockerfile.web-server
    restart: always
    entrypoint: ["./web-server"]
    ports:
      - "8080:8080"
    container_name: netflix-web-server
    environment:
      - MONGO_URI=mongodb://mongo:27017/ntfx
      - RECOMMENDATION_SERVER_HOST=recommendation-server
      - RECOMMENDATION_SERVER_PORT=8080
  
  recommendation-server:
    build:
      context: .
      dockerfile: Dockerfile.recommendation-server
    entrypoint: ["./recommendation-server"]
    ports:
      - "8080:8080"
    container_name: netflix-recommendation-server
    stdin_open: true  # Keep stdin open for interactive use
    tty: true  # Allocate a TTY for interactive use
    init: true

volumes:
  mongo-data:

# command to first create the images #
#   docker-compose build 

# command to run server and client #
# docker-compose run --name ntfx-server server 8080
# docker-compose run --name ntfx-client client ntfx-server 8080

# command to run server and client in interactive mode #
# docker-compose run --name [srv_name] server [srv_port]
# docker-compose run --name ntfx-client client [srv_name] [srv_port]

# command to restart server and client #
# docker start [server_container_id]
# docker start -i [client_container_id]

# command to stop server and client #
# docker stop [server_container_id]
# docker stop [client_container_id]

# command to remove server and client #
# docker rm [server_container_id]
# docker rm [client_container_id]

# command to remove images #
# docker rmi [server_image_id]
# docker rmi [client_image_id]

# command to remove all images #
# docker rmi $(docker images -q)